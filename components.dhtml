<script>
  import { router } from '/@nue/app-router.js'
  import { $ } from '/@nue/view-transitions.js'
  
  router.configure({ route: '/:filter' })
  
  const key = 'todos'

  function setSelected(query, attr, val = true) {
    $(`[${attr}]`)?.removeAttribute(attr)
    $(query)?.setAttribute(attr, val)
  }
</script>


<div @name="app">
  <header>
    <h1>todos</h1>
    <form @submit.prevent="add">
      <input type="checkbox" :checked="checked()" @change="all(!checked())">
      <input type="text" ref="new" placeholder="What needs to be done?" required>
    </form>
  </header>
  
  <main :if="todos.length">
    <ul>
      <li :for="{ id, done, text } in filter(state.filter)" :bind="e">
        <input type="checkbox" :checked="done" @change="set(id, !done)">
        <p @dblclick="edit" ref="display">{ text }</p>
        <input type="text" :value="text" ref="edit" @keydown="editEnd" @blur="editEnd" data-id="{id}">
        <button @click="del(id)">&times;</button>
      </li>
    </ul>
  </main>

  <footer :if="todos.length">
    <p>{ tbd() } items left</p>
    <nav>
      <a href="/">All</a>
      <a href="/active">Active</a>
      <a href="/completed">Completed</a>
    </nav>
    <p><button :if="tbd() < todos.length" @click="delDone">Clear completed</button></p>
  </footer>

  <script>
    state = router.state
    todos = JSON.parse(localStorage.getItem(key) || '[]')

    // funcs
    add()        { this.todos.push({ done: false, text: this.$refs.new.value }); this.$refs.new.value = '' }
    set(id)      { this.todos[id].done = !this.todos[id].done; this.update() }
    all(checked) { this.todos.forEach(e => e.done = checked) }
    del(id)      { this.todos.splice(id, 1) }
    delDone()    { this.todos = this.todos.filter(e => !e.done) }

    tbd()       { return this.todos.filter(e => !e.done).length }
    checked()   { return this.todos.length != 0 && this.tbd == 0 }
    save()      { localStorage.setItem(key, JSON.stringify(this.todos)) }

    edit(id) {
      console.log(id)
      return e => {
        console.log(e.target, id)
      }
    }

    filter(type) {
      const which =
          type == 'completed' ? e => e.done
        : type == 'active' ? e => !e.done
        : () => true

      return this.todos.map((e, i) => ({ ...e, id: i })).filter(which)
    }

    // el
    mounted() {
      router.initialize({ root: this.root })
      router.on('filter', ({ filter }) => { this.update() })
    }

    update() { this.save() }
  </script>
</div>
