<script>
  import { router } from '/@nue/app-router.js'
  import { mount } from '/@nue/mount.js'
  import { $ } from '/@nue/view-transitions.js'
  
  router.configure({ route: '/:filter' })
  
  const key = 'todos'
  const todos = load()
  emit()
  addEventListener(key, save)
  // addEventListener('storage', ({key, oldValue, newValue}) => { key == 'todos ' && oldValue != newValue && emit()})

  function setSelected(query, attr, val = true) {
    $(`[${attr}]`)?.removeAttribute(attr)
    $(query)?.setAttribute(attr, val)
  }

  function load() { return JSON.parse(localStorage.getItem(key) || '[]') }
  function save() { localStorage.setItem(key, JSON.stringify(todos)) }
  function emit(name=key) { dispatchEvent(new Event(name)) }

  function add(text) {
    todos.push({ done: false, text })
    emit()
  }

  function del(id) {
    todos.splice(id, 1)
    emit()
  }

  function delDone() {
    todos.splice(0, todos.length,...todos.filter(e => !e.done))
    emit()
  }

  function toggleAll(done) {
    todos.forEach(e => e.done = done)
    emit()
  }

  function setState(id, done) {
    todos[id].done = done
    emit()
  }

  function todoCount() { return todos.filter(e => !e.done).length }
</script>


<div @name="app">
  <add-todo />
  <todos :if="len" />
  <filters :if="len" />

  <script>
    len = todos.length
    mounted() {
      router.initialize({ root: this.root })
      addEventListener(key, () => this.update({ len: todos.length }))
    }
  </script>
</div>


<header @name="add-todo">
  <h1>todos</h1>
  <form @submit.prevent="add($refs.todo.value); $refs.todo.value = ''">
    <input type="checkbox" :checked="checked" @change="toggleAll(!checked)">
    <input type="text" ref="todo" placeholder="What needs to be done?">
  </form>

  <script>
    checked = this.state()

    toggleAll = toggleAll
    add = add
    state() { return todos.length != 0 && todoCount() == 0 }

    mounted() { addEventListener(key, () => this.update({ checked: this.state() })) }
  </script>
</header>


<footer @name="filters">
  <p><strong>{ count }</strong> items left</p>
  <nav>
    <a href="/">All</a>
    <a href="/active">Active</a>
    <a href="/completed">Completed</a>
  </nav>
  <button style="opacity:{done_count}" @click="delDone">Clear completed</button>
  <!-- TODO: hide button -->

  <script>
    count = todoCount()
    done_count = todos.length - this.count

    delDone = delDone

    mounted() {
      addEventListener(key, () => {
        const count = todoCount()
        this.update({ count, done_count: todos.length - count })
      })
      router.bind('filter', ({ filter }, { path }) => {
        setSelected(`a[href="${path}"]`, 'aria-current', 'page')
      })
    }
  </script>
</footer>


<main @name="todos">
  <ul>
    <li :for="{ id, done, text } in todos" :bind="e">
      <input type="checkbox" :checked="done" @change="setState(id, !done)">
      <p>{ text }</p>
      <button @click="del(id)">&times;</button>
    </li>
  </ul>

  <script>
    setState = setState
    del = del

    mounted() {
      const filtered = (filter) => this.update({
        todos: todos.map((e,i) => {e.id = i; return e})
          .filter(e => !filter || (filter == 'completed' ? e.done : !e.done))
      })

      addEventListener(key, () => filtered(router.state.filter))
      router.bind('filter', ({ filter }) => filtered(filter))
      filtered(router.state.filter)
    }
  </script>
</main>
