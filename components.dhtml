<script>
  import { router } from '/@nue/app-router.js'
  import { mount } from '/@nue/mount.js'
  import { $ } from '/@nue/view-transitions.js'

  function setSelected(query, attr, val = true) {
    $(`[${attr}]`)?.removeAttribute(attr)
    $(query)?.setAttribute(attr, val)
  }

  router.configure({ route: '/:filter', persistent_params: ['todos'] })
  if (window.app) await mount('app', window.app)

  function log({target}) {console.log(target)}
</script>


<div @name="app">
  <add-todo />
  <todos />
  <filters />

  <script>
    mounted() { router.initialize({ root: this.root }) }
  </script>
</div>


<header @name="add-todo">
  <h1>todos</h1>
  <form @submit.prevent="add">
    <input type="checkbox" :checked="checked" @change="toggleAll(!checked)">
    <input type="text" ref="todo" placeholder="What needs to be done?">
  </form>

  <script>
    checked = this.state()

    state() {
      const todos = router.state.todos || []
      return todos.length != 0 && todos.filter(e => !e.done).length == 0
    }

    toggleAll(checked) {
      const todos = router.state.todos
      todos.forEach(e => e.done = checked)
      router.set({ todos })
    }

    add() {
      const todos = router.state.todos || []
      todos.push({done: false, text: this.$refs.todo.value })
      this.$refs.todo.value = ''
      router.set({ todos })
    }

    mounted() {
      router.bind('todos', () => {
        this.update({ checked: this.state() })
      })
    }
    log = log
  </script>
</header>


<footer @name="filters">
  <p>{ count } items left</p>
  <nav>
    <a href="/">All</a>
    <a href="/active">Active</a>
    <a href="/completed">Completed</a>
  </nav>
  <button @click="del">Clear completed</button>
  <!-- TODO: hide button -->

  <script>
    count = this.getCount()

    getCount() {
      return (router.state.todos || []).filter(e => !e.done).length
    }

    del() {
      router.set({ todos: (router.state.todos || []).filter(e => !e.done) })
    }

    mounted() {
      // fails to display when adding 'todos'
      router.bind('filter', (data, { path }) => {
        setSelected(`a[href="${path}"]`, 'aria-current', 'page')
        this.update({ count : this.getCount() })
      })
    }
  </script>
</footer>


<main @name="todos">
  <ul>
    <li :for="{ id, done, text } in todos" :bind="e">
      <input type="checkbox" :checked="done" @change="state(id, !done)">
      <p>{ text }</p>
      <button @click="del(id)">&times;</button>
    </li>
  </ul>

  <script>
    todos = []
    log = log

    state(id, done) {
      const todos = router.state.todos
      todos[id].done = done
      router.set({ todos })
    }

    del(id) {
      const todos = router.state.todos
      todos.splice(id, 1)
      router.set({ todos })
    }

    mounted() {
      router.bind('filter todos', ({ filter }) => {
        let todos = router.state.todos || []
        todos.forEach((e,i) => e.id = i)
        todos = todos.filter(e => !filter || (filter == 'completed' ? e.done : !e.done))
        this.update({ todos })
      })
    }
  </script>
</main>
